#!/bin/bash
. tbz-common.sh

if [ $# -le 1 ] ; then
	echo "$(basename $0) file_in file_out [--noise-level=X] [--scale-ratio=X] [--type={anime,photo}] [--gpu=X] [--w2x={caffe,w2xc}]"
	exit 0
fi

fname=""
file_out=""
scale_ratio=""
noise_level=""
W2X=""
model=""
gpu=""

for arg; do
	if [[ "$arg" =~ ^--noise-level= ]] ; then
		noise_level="${arg#--noise-level=}"
	elif [[ "$arg" =~ ^--scale-ratio= ]] ; then
		scale_ratio="${arg#--scale-ratio=}"
	elif [[ "$arg" =~ ^--type= ]] ; then
		model="${arg#--type=}"
	elif [[ "$arg" =~ ^--gpu= ]] ; then
		gpu="${arg#--gpu=}"
	elif [[ "$arg" =~ ^--w2x= ]] ; then
		W2X="${arg#--w2x=}"
	elif [ -z "$fname" ] ; then
		fname="$arg"
	elif [ -z "$file_out" ] ; then
		file_out="$arg"
	else
		error "Invalid Trailing Argument: $arg"
	fi
done

if [ ! -e "$fname" ] ; then
	error "Cannot find: $fname"
fi

if [ -z "$noise_level" ] ; then
	noise_level=0
fi

if [ -z "$scale_ratio" ] ; then
	scale_ratio=1
fi

if [ "$noise_level" = 0 ] && [ "$scale_ratio" = 1 ] ; then
	warning "Not denoising or scaling. Nothing much will happen."
fi

if [ -z "$W2X" ] ; then
	CAFFE=false
elif [ "$W2X" = "caffe" ] ; then
	CAFFE=true
elif [ "$W2X" = "w2xc" ] ; then
	CAFFE=false
else
	error "Invalid Waifu2x type: $W2X"
fi

# Use photo model?
if [ -z "$model" ] ; then
	photo="False"
elif [ "$model" = "anime" ] ; then
	photo="False"
elif [ "$model" = "photo" ] ; then
	photo="True"
else 
	error "Invalid picture type: $model"
fi

if [ -z "$gpu" ] ; then
	gpu="-1"
fi

clup() {
	rm -f "$tempin".ffindex
	rm -f "$tempin"
}

add_cleanup_routine clup

#fname="$(readlink -f "$1")"
#file_out="$2"

#width=$(identify -format '%w' "$fname")
#height=$(identify -format '%h' "$fname")
#pix_fmt=$(ffprobe -v error -show_entries stream=pix_fmt -of default=noprint_wrappers=1:nokey=1 "$fname")


_return_var=tempoutp temp_suffix=png create_temp_file
_return_var=tempout temp_suffix=raw create_temp_file
_return_var=tempin temp_suffix=png create_temp_file
_return_var=tempscript temp_suffix=vpy create_temp_file

cat >"$tempscript" <<EOF
import vapoursynth as vs
import finesharp
import kagefunc as kageru
import bombzenfunc as bzf
core = vs.core

# waifu2x requires RGBS
# RGBS is Single Precision RGB float, i.e. rgb32f

clip = core.ffms2.Source(source=image_in)

def get_plane(clip, plane):
	return core.std.ShufflePlanes(clips=[clip], planes=[plane], colorfamily=vs.GRAY)

if (type(clip) is list):
	have_alpha=True
	colorclip=clip[0]
	aclip=clip[1]
else:
	have_alpha=False
	colorclip=clip

colorclip = core.resize.Spline36(colorclip, format=vs.YUV444PS, matrix_s='709')
if (have_alpha):
	aclip = core.resize.Spline36(aclip, format=vs.GRAYS, range_in_s='full', range_s='full')

colorclip = core.knlm.KNLMeansCL(colorclip, d=0, a=64, s=1, h=float(noise_level), channels='YUV', device_type='gpu', device_id=(int(gpu) if int(gpu) >= 0 else 0))
if (have_alpha):
	aclip = core.knlm.KNLMeansCL(aclip, d=0, a=64, s=1, h=float(noise_level), channels='Y', device_type='gpu', device_id=(int(gpu) if int(gpu) >= 0 else 0))
else:
	aclip = core.std.BlankClip(colorclip, format=vs.GRAYS, color=[1.0])

def sharp(clip):
	mask = kageru.kirsch(kageru.getY(clip)).std.Deflate()
	sharpclip = finesharp.sharpen(clip, mode=1)
	return core.std.MaskedMerge(clip, sharpclip, mask)

colorclip = core.resize.Spline36(colorclip, format=vs.YUV444P16)
if (have_alpha):
	aclip = core.resize.Spline36(aclip, format=vs.GRAY16)

colorclip = sharp(colorclip)
if (have_alpha):
	aclip = sharp(aclip)

colorclip = bzf.znedi3_rpow2(colorclip, rfactor=2, nns=4, qual=2).resize.Spline36(width=colorclip.width, height=colorclip.height)
if (have_alpha):
	aclip = bzf.znedi3_rpow2(aclip, rfactor=2, nns=4, qual=2).resize.Spline36(width=aclip.width, height=aclip.height)

colorclip = bzf.dehalo(colorclip)
if (have_alpha):
	aclip = bzf.dehalo(aclip)

colorclip = core.resize.Spline36(colorclip, format=vs.RGB24, matrix_in_s='709')
aclip = core.resize.Spline36(aclip, format=vs.GRAY8, range_in_s='full', range_s='full')
clip = core.std.Splice([get_plane(colorclip, 1), get_plane(colorclip, 2), get_plane(colorclip, 0), aclip])
clip.set_output()
EOF

convert "$fname" "$tempin"

runwaifu2x(){

	width=$(identify -format '%w' "$tempin")
	height=$(identify -format '%h' "$tempin")

	newwidth=$(printf '%.0f' "$(__ readfrom "$width * $scale_ratio_temp" bc -l)")
	newheight=$(printf '%.0f' "$(__ readfrom "$height * $scale_ratio_temp" bc -l)")
	new2xwidth=$(($width * $scale_ratio_2x))
	new2xheight=$(($height * $scale_ratio_2x))

	vspipe --arg image_in="$tempin" --arg noise_level="$noise_level" --arg scale_ratio="$scale_ratio_2x" --arg photo="$photo" --arg gpu="$gpu" "$tempscript" "$tempout"
	ffmpeg -hide_banner -y -f rawvideo -video_size "${new2xwidth}x${new2xheight}" -pixel_format gbrap -i "$tempout" "$tempoutp"
	optipng -force -zc6 -zm8 -zs0 -f0 "$tempoutp"
	if [ "$photo" = "True" ] ; then
		convert "$tempoutp" -filter mitchell -resize "${newwidth}x${newheight}" "$tempin"
	else
		convert "$tempoutp" -filter Catrom -resize "${newwidth}x${newheight}" "$tempin"
	fi
}

while (( "$( bc -l <<<"$scale_ratio > 2.0" )" )) ; do
	note "Using Waifu2x more than once for a better image."
	scale_ratio_temp=2
	scale_ratio_2x=2
	runwaifu2x
	scale_ratio=$(bc -l <<<"$scale_ratio / 2.0")
done

if (( "$( bc -l <<<"$scale_ratio > 1.0" )" )) ; then
	note "Scale ratio between 1 and 2. Upscaling 2x then downscaling (if necessary)."
	scale_ratio_temp="$scale_ratio"
	scale_ratio_2x=2
	runwaifu2x
else
	scale_ratio_temp="$scale_ratio"
	scale_ratio_2x=1
	runwaifu2x
fi

mv -f "$tempin" "$file_out"
