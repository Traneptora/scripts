#!/usr/bin/env bash

# thebombzen's easy video clipping script
#
# Dependencies: These must be in your path
# 1. bash
# 2. ffmpeg
# 3. awk
# 4. mkvmerge (if outputting to matroska)
#
# Usage:
#     clipvideo INPUT_FILENAME OUTPUT_FILENAME --start=START_TIMECODE --end=END_TIMECODE [options]
#
# This will create (and overwrite!) output_filename as input_filename but temporally clipped between the timecodes
# Option order does not matter for the most part, and options can be inserted anywhere among the initial filenames, --start, and --end. 
# If the same option is specified twice, the second one wins.
# Some options can be specified more than once. See below.
#
# Note: To streamcopy rather than re-encode, it's much faster and there's no quality loss, but the timecodes will be inaccurate.
# You will get more video and audio than you bargained for.
# To do this, use:
#     clipvideo INPUT_FILENAME OUTPUT_FILENAME --start=START_TIMECODE --end=END_TIMECODE --codec=copy --acodec=copy --ffopts='-c copy'
#
# If you want to copy always, no matter what, then add this line to ~/.bashrc
#     alias clipvideo='clipvideo --codec=copy --acodec=copy --ffopts="-c copy"'
#
# Most options have very sane defaults (that's the point of the script, tbh).
# You should not touch them unless you know why.
#
# Options:
# --subs=VALUE
#     VALUE can be hard, to burn the subtitles into the video
#                  soft, to copy the subtitle stream and any attachments
#                  image, to burn image subtitles into the video (this is hard to autodetect)
#                  no (default), do not copy subtitles
#
# --ffmpeg=VALUE
#     Path to FFmpeg, if it's not in the environment variable PATH.
#     Allows you to select a specific one if more than one is installed.
#     Default: ffmpeg
#
# --size=VALUE
#     Scale the video to size VALUE. Give it in WxH. (e.g. 1280x720)
#     Default: Same as input. (i.e. do nothing)
#
# --fps=VALUE
#     Duplicate and drop frames to achieve the framerate VALUE.
#     Default: Same as input. (i.e. do nothing)
#
# --pixel-format=VALUE
#     Output to the pixel format VALUE.
#     Default: Automatically select the appropriate output pixel format.
#
# --container-format=VALUE
#     Write to the file format VALUE.
#     Default: Autodetect the file format from the filename.
#
# --aid=VALUE
#     VALUE is the index of the audio stream you want to clip.
#     It starts at 1, not 0.
#     Default: 1
#
# --sid=VALUE
#     VALUE is the index of the subtitle stream you want to clip.
#     It starts at 1, not 0.
#     Default: 1
#
# --codec=VALUE
#     Set the video codec.
#     These use libavcodec names. Most common names are added as aliases.
#     Default: libx264.
#
# --bitrate=VALUE
#     Set the video bitrate in bits per second.
#     Set to "vbr" to use VBR encoding for video.
#     supports 'k' and 'M' as suffixes.
#     Default: vbr
#
# --quality=VALUE
#     Set the VBR quality. For x264, x265, vp8, and vp9, this is the CRF value. For others, it's a constant QP.
#     Note: Lower is higher quality. Setting it to 0 is lossless.
#     Note: This option does absolutely nothing for lossless codecs.
#     Default: CRF 16 for x264, x265, vp8, and vp9. QP 25 for others.
#
# --filter=VALUE
#     Add a libavfilter-syntax video filtergraph.
#     This option can be specified multiple times.
#     Default: No video filter.
#
# --ffopts=VALUE
#     Add extra options to the ffmpeg execution.
#     This option can be specified multiple times.
#     Default: No extra options.
#
# --pause
#     Ignored. (mpv compatibility)
#
# --mute
#     Ignored. (mpv compatibility)
#

VIDEOSTREAM="v:0?"
AUDIOSTREAM="a:0?"
VIDEOINPUT=""
VIDEOOUTPUT=""
ARGSDONE="no"
SUBS="no"
SID=0
START=""
END=""
LENGTH=""
VENCODER="libx264"
VBITRATE="vbr"
PIXEL_FORMAT=""
FFOPTS=""
FILTER="copy"
QUALITY=""
SIZE=""
FPS=""
FFMPEG="ffmpeg"
LIBX264SHARED=""
AENCODER=""
SENCODER=""
CONTAINER=""
X265OPTS="aq-mode=3:bframes=8:psy-rd=1.0"
X264OPTS="aq-mode=3:bframes=8"
USE_MKVMERGE="false"
FORCE="false"
FORMATOPTS=""
SUBSLINK=".clipvideo_subsymlink"
REMUX_MOVMP4="false"
SPEED="1.0"
AFILTER="acopy"
SPEEDCHANGER=""
AAC_ENCODER="aac"
STARTOPTS=""
DRY_RUN="false"
NO_ZSCALE="false"

_message_nonfatal() {
	title="$1"
	color="$2"
	uncolor="$3"
	shift 3
	if [ -z "${1+x}" ] ; then
		message=""
	else
		message="$1"; shift
	fi
	if [ -t 2 ] ; then
		printf >&2 "${color}%s: ${uncolor}%s\e[0m\n" "$title" "$message"
	else
		printf '%s: %s\n' "$title" "$message" >&2
	fi
	while [ -n "${1+x}" ]; do
		printf "${color}%s${uncolor}\e[0m\n" "$1"
		shift
	done
}

error(){
	_message_nonfatal 'Error' '\e[31m\e[1m' '\e[21m' "$@"
	exit 1
}

warning(){
	_message_nonfatal 'Warning' '\e[33m\e[1m' '\e[21m' "$@"
}

note(){
	_message_nonfatal 'Note' '\e[36m\e[1m' '\e[21m' "$@"
}

cleanup(){
	rm -f -- "${SUBSLINK}"
}

trap cleanup EXIT

# metadata tags added by mkvmerge or iOS
BAD_METADATA="BPS DURATION NUMBER_OF_FRAMES NUMBER_OF_BYTES _STATISTICS_WRITING_APP _STATISTICS_WRITING_DATE_UTC _STATISTICS_TAGS creation_time handler_name"
BAD_GLOBAL_METADATA="major_brand minor_version compatible_brands"
BAD_MD_OPTS=""

# Strip away mkvmerge metadata tags as they're not going to be relevant anymore
for tag in $BAD_METADATA; do
	BAD_MD_OPTS="$BAD_MD_OPTS -metadata:s ${tag}= -metadata:s ${tag}-eng="
done

for tag in $BAD_GLOBAL_METADATA; do
	BAD_MD_OPTS="$BAD_MD_OPTS -metadata ${tag}="
done

process_option(){
	NAME="$1"
	VALUE="$2"
	NAMEL=$(awk 'BEGIN { print(tolower(ARGV[1])) }' "$NAME")
	VALUEL=$(awk 'BEGIN { print(tolower(ARGV[1])) }' "$VALUE")
	case "$NAMEL" in
		subs)
			case "$VALUEL" in
				hard|soft|image|no)
					SUBS="$VALUEL"
					;;
				*)
					error "Invalid --subs value." "Accepted values: hard, soft, image, no"
					exit 1
					;;
			esac
			;;
		vid|video)
			VIDEOSTREAM="v:$((VALUE-1))?"
			;;
		aid|audio)
			# Amazingly, this works with FFmpeg
			# --aid=no turns into a:-1
			# There is never a stream with id -1
			# So --aid=no disables audio
			if [ "$VALUEL" = "no" ] ; then
				AUDIOSTREAM="no"
			else
				AUDIOSTREAM="a:$((VALUE-1))?"
			fi
			;;
		end|ab-loop-b)
			END="$VALUE"
			;;
		length)
			LENGTH="$VALUE"
			;;
		start|ab-loop-a)
			START="$VALUE"
			;;
		bitrate|vbitrate|vb)
			VBITRATE="$VALUE"
			;;
		abitrate|ab)
			ABITRATE="$VALUE"
			;;
		codec|vcodec)
			VENCODER="$VALUEL"
			;;
		scodec)
			SENCODER="$VALUEL"
			;;
		sid)
			SID="$((VALUE-1))"
			;;
		ffopts)
			FFOPTS="$FFOPTS $VALUE"
			;;
		ffmpeg|ffmpeg-exe)
			FFMPEG="$VALUE"
			;;
		format)
			error "--format has been removed. Use --pixel-format instead."
			exit 1
			;;
		pixel-format)
			PIXEL_FORMAT="$VALUEL"
			;;
		# Geometry and Autofit for mpv compat
		size|geometry|autofit)
			SIZE="$VALUEL"
			;;
		fps)
			FPS="$VALUE"
			;;
		filter|vf|vf-add|vf-pre)
			if ! [ "$VALUE" = "${VALUE#lavfi=}" ] ; then
				# remove the lavfi we know is there
				VALUE="${VALUE#lavfi=}"
				# mpv allows (sometimes requires) you to wrap lavfi in quotes
				VALUE="${VALUE#\"}"
				VALUE="${VALUE%\"}"
			fi
			FILTER="$FILTER,$VALUE"
			;;
		afilter|af|af-add|af-pre)
			if ! [ "$VALUE" = "${VALUE#lavfi=}" ] ; then
				# remove the lavfi we know is there
				VALUE="${VALUE#lavfi=}"
				# mpv allows (sometimes requires) you to wrap lavfi in quotes
				VALUE="${VALUE#\"}"
				VALUE="${VALUE%\"}"
			fi
			AFILTER="$AFILTER,$VALUE"
			;;
		x265opts)
			X265OPTS="${X265OPTS}:$VALUE"
			;;
		x264opts)
			X264OPTS="${X264OPTS}:$VALUE"
			;;
		libx264-shared|libx264-so|libx264-dll|libx264-dylib)
			warning "This option has been removed because libx264 supports 10bit in main"
			;;
		use-mkvmerge)
			# Remux the file together with mkvmerge
			# lavf has occasional issues with mkv muxing
			USE_MKVMERGE="true"
			;;
		remux-movmp4)
			# the purpose of this option is to allow previewing during encoding while outputting to mov or mp4
			REMUX_MOVMP4="true"
			;;
		acodec)
			AENCODER="$VALUEL"
			;;
		container|container-format)
			CONTAINER="$VALUEL"
			;;
		qp)
			error "--qp is removed. Use --quality instead."
			exit
			;;
		quality)
			QUALITY="$VALUE"
			;;
		speed)
			SPEED="$VALUE"
			;;
		force)
			warning "Disabling sanity checks and aliases. Errors are your fault!"
			FORCE="true"
			;;
		# mpv compatibility
		pause|loop-playlist|loop-file)
			note "Ignoring --${NAME}"
			;;
		mute)
			AUDIOSTREAM="no"
			;;
		dry-run)
			warning "Doing a dry-run."
			DRY_RUN="true"
			;;
		no-zscale)
			NO_ZSCALE="true"
			;;
		*)
			error "Invalid option: $NAME"
			;;
	esac
}

process_naked_argument(){
	if [ -z "$VIDEOINPUT" ] ; then
		VIDEOINPUT="$arg"
	elif [ -z "$VIDEOOUTPUT" ] ; then
		VIDEOOUTPUT="$arg"
	else
		error "Invalid trailing argument: $arg"
		exit 1
	fi
}

found_mm=false
for arg; do
	if [ "$found_mm" = "true" ] ; then
		process_naked_argument "$arg"
	elif [ "$arg" = "--" ] ; then
		found_mm="true"
	elif ! [ "${arg#--}" = "${arg}" ]; then
		arg=${arg#--}
		name=${arg%%=*}
		value=${arg#*=}
		process_option "$name" "$value"
	else
		process_naked_argument "$arg"
	fi
done

ffmpeg_v(){
	printf '%s %s\n' "$FFMPEG" "$*"
	ffmpeg "$@"
}

if [ -z "${VIDEOINPUT}" ] || [ -z "${VIDEOOUTPUT}" ] ; then
	error "Provide both a video input and output."
	exit
fi

if [ -z "$START" ] && [ -z "$END" ] ; then
	warning "Clipping the entire video."
fi

if [ -z "$START" ] ; then
	START=0
fi

if ( grep -Eq -e image -e hard <<<"$SUBS" ) && [ "$VENCODER" = "copy" ] ; then
	error "Cannot codec copy when hardsubbing."
	exit 1
fi

if grep -Eq -e '^nv' -e '^p0' <<<"$PIXEL_FORMAT" ; then
	error "Use planar pixel formats."
	exit 1
fi

if [ -z "$CONTAINER" ] ; then
	case "$VIDEOOUTPUT" in
		*.mkv|*.mka|*.mk3d|*.mks)
			CONTAINER='matroska'
			;;
		*.ts|*.tsv|*.tsa|*.mpegts|*.m2ts|*.m2t)
			CONTAINER='mpegts'
			;;
		*.nut)
			CONTAINER='nut'
			;;
		*.mp4|*.m4a|*.m4v)
			CONTAINER='mp4'
			;;
		*.ogg|*.oga|*.ogv)
			CONTAINER='ogg'
			;;
		*.webm)
			CONTAINER='webm'
			;;
		*.mov)
			CONTAINER='mov'
			;;
		*)
			CONTAINER='auto'
	esac
elif ! [ "$FORCE" = "true" ] ; then
	case "$CONTAINER" in
		mkv|mka|mk3d|mks)
			warning "$CONTAINER is an alias for matroska."
			CONTAINER="matroska"
			;;
		ts|tsa|tsv)
			warning "$CONTAINER is an alias for mpegts."
			CONTAINER="mpegts"
			;;
		m4a|m4v)
			warning "$CONTAINER is an alias for mp4."
			CONTAINER="mp4"
			;;
		ogv|oga)
			warning "$CONTAINER is an alias for ogg."
			CONTAINER="ogg"
			;;
	esac
fi

if ffmpeg -v panic -f lavfi -i anullsrc -c:a libfdk_aac -t 1 -b:a 128k -f null - ; then
	AAC_ENCODER="libfdk_aac"
else
	AAC_ENCODER="aac"
fi

if [ -z "$AENCODER" ] ; then
	case "$CONTAINER" in
		matroska|mpegts|nut|webm)
			AENCODER="libopus"
			;;
		mp4|mov)
			AENCODER="$AAC_ENCODER"
			;;
		ogg)
			AENCODER="libvorbis"
			;;
		*)
			AENCODER="auto"
			;;
	esac
fi

if ! [ "$FORCE" = "true" ] ; then case "$AENCODER" in
	mp3)
		note "$AENCODER is an alias for libmp3lame."
		AENCODER="libmp3lame"
		;;
	opus)
		note "$AENCODER is an alias for libopus."
		AENCODER="libopus"
		;;
	libvo-aacenc|libvo_aacenc)
		warning "$AENCODER is an alias for '$AAC_ENCODER' because $AENCODER is unbelievably terrible."
		AENCODER="$AAC_ENCODER"
		;;
	vorbis)
		note "$AENCODER is an alias for libvorbis."
		AENCODER="libvorbis"
		;;
esac; fi

case "$AENCODER" in
	libopus)
		AUDIOOPTS="-c:a $AENCODER -b:a 160k -ac:a 2"
		;;
	libvorbis)
		AUDIOOPTS="-c:a $AENCODER -q:a 6"
		;;
	aac|libfdk_aac)
		AUDIOOPTS="-c:a $AENCODER -b:a 160k"
		;;
	libmp3lame)
		AUDIOOPTS="-c:a $AENCODER -b:a 256k"
		;;
	# lossless stuff
	copy|ape|pcm*)
		AUDIOOPTS="-c:a $AENCODER"
		;;
	# more lossless
	flac|alac)
		AUDIOOPTS="-c:a $AENCODER -compression_level:a 12"
		;;
	*)
		AUDIOOPTS="-c:a $AENCODER -b:a 128k"
		;;
esac

FORMATOPTS="$FORMATOPTS -f $CONTAINER"

if [ -z "$SENCODER" ] ; then case "$CONTAINER" in
	matroska)
		if [ "$USE_MKVMERGE" = "true" ]; then
			VIDEOOUTPUT="$VIDEOOUTPUT".mkv
			FORMATOPTS="$FORMATOPTS -live 1"
		fi
		SENCODER="ass"
		;;
	webm)
		if [ "$USE_MKVMERGE" = "true" ] ; then
			VIDEOOUTPUT="$VIDEOOUTPUT".webm
			FORMATOPTS="$FORMATOPTS -live 1"
		fi
		SENCODER="webvtt"
		;;
	mp4)
		FORMATOPTS="$FORMATOPTS -movflags +faststart"
		if [ "$AENCODER" = "libopus" ] ; then
			FORMATOPTS="$FORMATOPTS -strict experimental"
		fi
		if [ "$REMUX_MOVMP4" = "true" ] ; then
			VIDEOOUTPUT="$VIDEOOUTPUT".nut
			FORMATOPTS="$FORMATOPTS -f nut"
		fi
		SENCODER="mov_text"
		;;
	mov)
		FORMATOPTS="$FORMATOPTS -movflags +faststart"
		if [ "$REMUX_MOVMP4" = "true" ] ; then
			VIDEOOUTPUT="$VIDEOOUTPUT".nut
			FORMATOPTS="$FORMATOPTS -f nut"
		fi
		SENCODER="mov_text"
		;;
esac; fi

if ! [ "$FORCE" = "true" ] ; then case "$VENCODER" in
	nvenc|nvenc_h264)
		warning "$VENCODER is a deprecated alias for h264_nvenc."
		VENCODER="h264_nvenc"
		;;
	nvenc_hevc)
		warning "$VENCODER is a deprecated alias for hevc_nvenc."
		VENCODER="hevc_nvenc"
		;;
	h264|avc|x264)
		note "$VENCODER is an alias for libx264."
		VENCODER="libx264"
		;;
	h265|hevc|x265)
		note "$VENCODER is an alias for libx265."
		VENCODER="libx265"
		;;
	vp8|libvpx-vp8)
		warning "$VENCODER is an alias for libvpx."
		VENCODER="libvpx"
		;;
	vp9)
		note "$VENCODER is an alias for libvpx-vp9."
		VENCODER="libvpx-vp9"
		;;
esac; fi

if [ -z "$QUALITY" ] ; then
	case "$VENCODER" in
		libx26?|libvpx*)
			QUALITY=16
			;;
		*)
			QUALITY=25
			;;
	esac
fi

if [ "$VBITRATE" = "vbr" ] ; then
	case "$VENCODER" in
		libx26?)
			if [ "$QUALITY" -eq 0 ] ; then
				# This is truly lossless for 10-bit avc
				VBITRATEOPTS="-qp:v 0"
			else
				VBITRATEOPTS="-crf:v $QUALITY"
			fi
			;;
		libvpx*)
			VBITRATEOPTS="-b:v 0 -crf:v $QUALITY"
			;;
		# These are lossless
		copy|ffvhuff|huffyuv|utvideo|ffv1|rawvideo|wrapped_avframe|png|ppm|gif|bmp)
			VBITRATEOPTS=""
			;;
		*)
			VBITRATEOPTS="-qp:v $QUALITY"
			;;
	esac
else
	VBITRATEOPTS="-b:v $VBITRATE"
fi

case "$VENCODER" in
	h264_nvenc)
		VIDEOOPTS="-c:v h264_nvenc -preset:v slow -profile:v high -spatial-aq:v 1 -qmin:v 0 -qmax:v 69"
		;;
	libx264)
		VIDEOOPTS="-c:v libx264 -preset:v slow -x264opts ${X264OPTS}"
		;;
	libx265)
		VIDEOOPTS="-c:v libx265 -preset:v slow -x265-params ${X265OPTS}"
		;;
	# The _ in spacial_aq is intentional
	# Nvenc is weird
	hevc_nvenc)
		VIDEOOPTS="-c:v hevc_nvenc -preset:v slow -tier:v 1 -rc-lookahead:v 120 -spatial_aq:v 1"
		;;
	ffv1)
		VIDEOOPTS="-c:v ffv1 -level:v 3 -g:v 1 -slicecrc:v 1 -coder:v range_tab -slices:v 4 -threads:v 4"
		;;
	*)
		VIDEOOPTS="-c:v $VENCODER"
		;;
esac

signdiff() {
	awk -v n1="$1" -v n2="$2" 'BEGIN {print (n1 < n2 ? "-1" : (n1 > n2 ? "1" : "0")) }'
}

if [ "$(signdiff "$SPEED" "1.0" )" -ne '0' ] ; then
	SPEEDSCALER="atempo="
	if [ "$(signdiff "$SPEED" "2.0")" -gt '0' ] || [ "$(signdiff "$SPEED" "0.5")" -lt '-1' ]; then
		if ffmpeg -v error -f lavfi -i anullsrc -af rubberband=tempo="$SPEED" -t 1 -f null -; then
			SPEEDSCALER="rubberband=tempo="
		fi
	fi
	AFILTER="${SPEEDSCALER}${SPEED},${AFILTER}"
	FILTER="setpts=PTS/${SPEED},${FILTER}"
fi

if [ -z "$PIXEL_FORMAT" ] ; then
	case "$VENCODER" in
		*_nvenc)
			if ffmpeg -v error -f lavfi -i yuvtestsrc -vf scale,format=yuv420p10le -pix_fmt yuv420p10le -c "$VENCODER" -frames 1 -f nut - | ffprobe -v error -show_entries stream=pix_fmt -of default=noprint_wrappers=1:nokey=1 -f nut -i - | grep -q -e '10le$'; then
				PIXEL_FORMAT=yuv420p10le
			else
				PIXEL_FORMAT=yuv420p
			fi
			;;
		libx26?)
			if ffmpeg -v error -f lavfi -i yuvtestsrc -vf scale,format=yuv420p10le -pix_fmt yuv420p10le -c "$VENCODER" -frames 1 -f nut - | ffprobe -v error -show_entries stream=pix_fmt -of default=noprint_wrappers=1:nokey=1 -f nut -i - | grep -q -e '10le$'; then
				PIXEL_FORMAT=yuv420p10le
			else
				PIXEL_FORMAT=yuv420p
			fi
			;;
		*)
			PIXEL_FORMAT="auto"
			;;
	esac
fi

if ! [ "$NO_ZSCALE" = "true" ] && ffmpeg -v panic -f lavfi -i yuvtestsrc -vf zscale -frames 1 -f null -; then
	scaler_(){
		if grep -Eq -e 'bgr' -e 'rgb' -e 'gbr' -e 'bayer' <<<"$PIXEL_FORMAT" ; then
			printf 'zscale=%s:f=spline36:range=pc' "$1"
		else
			printf 'zscale=%s:f=spline36:range=tv' "$1"
		fi
	}
else
	scaler_(){
		printf 'scale=%s:interl=-1:flags=lanczos' "$(__ readfrom "$1" tr 'x' ':')"
	}
fi

if [ -n "$FPS" ] ; then
	FILTER="${FILTER},fps=fps=${FPS}"
	if [ -z "$END" ] ; then
		FFOPTS="$FFOPTS -shortest"
	fi
fi

if [ -n "$SIZE" ] ; then
	FILTER="${FILTER},$(scaler_ $SIZE)"
else
	FILTER="${FILTER},$(scaler_ w=iw:h=ih)"
fi

if [ "$PIXEL_FORMAT" != "auto" ] ; then
	FILTER="${FILTER},format=${PIXEL_FORMAT}"
	if grep -Eq -e 'bgr' -e 'rgb' -e 'gbr' -e 'bayer' <<<"$PIXEL_FORMAT"; then
		FORMATOPTS="$FORMATOPTS -color_range pc"
	else
		FORMATOPTS="$FORMATOPTS -color_range tv"
	fi
fi

time_duration_toseconds() {
	awk -F: '{ n = 1; for (i = NF; i > 0; i--) { out = $i * n + out; n = n * 60 } print out }' <<<"$1"
}

STARTSECS="$(time_duration_toseconds "$START")"

if [ -n "$LENGTH" ] ; then
	# not dividing by speed here is intentional
	DURATION="$(time_duration_toseconds "$LENGTH")"
elif [ -n "$END" ] ; then
	ENDSECS="$(time_duration_toseconds "$END")"
	DURATION="$(awk "BEGIN { print ( $ENDSECS - $STARTSECS ) / $SPEED }")"
fi

if [ "$SUBS" = "hard" ] ; then
	ln -sf "$VIDEOINPUT" "${SUBSLINK}"
fi

FILTER="${FILTER##,}"
FILTER="${FILTER%%,}"
FILTER=$(sed -r 's/,+/,/g' <<<"$FILTER")

FORMATOPTS="$FORMATOPTS $BAD_MD_OPTS"

case "$SUBS" in
	image)
		FILTER="copy,[s:${SID}]overlay,setpts=PTS-$STARTSECS/TB,$FILTER"
		AFILTER="asetpts=PTS-STARTPTS,$AFILTER"
		;;
	hard)
		FILTER="subtitles=filename=${SUBSLINK}:si=$SID,setpts=PTS-$STARTSECS/TB,${FILTER}"
		AFILTER="asetpts=PTS-STARTPTS,$AFILTER"
		;;
esac

if [ "$(signdiff "$STARTSECS" '0')" -gt '0' ] ; then
	STARTOPTS="-ss $STARTSECS"
	if [ "$SUBS" = "image" ] || [ "$SUBS" = "hard" ] ; then
		STARTOPTS="$STARTOPTS -copyts -start_at_zero"
	fi
fi

set --

if [ -n "$END" ] || [ -n "$LENGTH" ] ; then
	set -- "$@" "-t" "$DURATION"
fi

if [ "$VENCODER" != "copy" ] ; then
	set -- "$@" "-vf" "$FILTER"
fi

if [ "$AENCODER" != "copy" ] ; then
	set -- "$@" "-af" "$AFILTER"
fi

if [ "$SUBS" = "image" ] ; then
	if [ "$AUDIOSTREAM" = no ] ; then
		set -- -map "$VIDEOSTREAM" -an "$@"
	else
		set -- -map "$VIDEOSTREAM" -map "$AUDIOSTREAM" "$@"
	fi
elif [ "$SUBS" = "soft" ] ; then
	if [ "$AUDIOSTREAM" = no ] ; then
		set -- -map "$VIDEOSTREAM" -an -map s:"$SID" -map t? -map d? -c copy -c:s "$SENCODER" "$@"		
	else
		set -- -map "$VIDEOSTREAM" -map "$AUDIOSTREAM" -map s:"$SID" -map t? -map d? -c copy -c:s "$SENCODER" "$@"
	fi
elif [ "$SUBS" = "hard" ] ; then
	if [ -n "$FILTER" ] ; then FILTER=",$FILTER"; fi
	if [ "$AUDIOSTREAM" = no ] ; then
		set -- -map "$VIDEOSTREAM" -an "$@"
	else
		set -- -map "$VIDEOSTREAM" -map "$AUDIOSTREAM" "$@"
	fi
else
	if [ "$AUDIOSTREAM" = no ] ; then
		set -- -map "$VIDEOSTREAM" -an -c copy "$@"
	else
		set -- -map "$VIDEOSTREAM" -map "$AUDIOSTREAM" -c copy "$@"
	fi
fi

set -- "-hide_banner" "-y" $STARTOPTS -i "$VIDEOINPUT" "$@" $VIDEOOPTS $VBITRATEOPTS $AUDIOOPTS $FORMATOPTS $FFOPTS "$VIDEOOUTPUT"

if [ "$DRY_RUN" = "true" ] ; then
	printf '%s %s\n' "$FFMPEG" "$*"
else
	ffmpeg_v "$@"
	if [ "$USE_MKVMERGE" = "true" ] && grep -Fqx -e 'matroska' -e 'webm' <<<"$CONTAINER" ; then
		MKVMERGEOPTS="--verbose"
		if [ -n "$FPS" ] ; then
			MKVMERGEOPTS="$MKVMERGEOPTS --default-duration 0:${FPS}fps"
		fi
		mkvmerge --verbose $MKVMERGEOPTS -o "${VIDEOOUTPUT%.*}" "$VIDEOOUTPUT"
		rm -f "$VIDEOOUTPUT"
	fi
	if [ "$REMUX_MOVMP4" = "true" ] && grep -Fqx -e 'mov' -e 'mp4' <<<"$CONTAINER"; then
		ffmpeg -hide_banner -y -i "$VIDEOOUTPUT" -map 0 -c copy $FORMATOPTS -f "$CONTAINER" "${VIDEOOUTPUT%.nut}"
		rm -f "$VIDEOOUTPUT"
	fi
fi
