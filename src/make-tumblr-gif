#!/bin/bash
set -e

exename="$0"


finish() {
	if [ $? -ne 0 ] ; then
		echo "Some error occurred. :("
	fi
	rm -f $nutfile
	rm -f $palettefile
	rm -f $datafile
	rm -f $giffile
}

trap finish EXIT

usage(){
	printf "Usage:\n\t%s input_video_file output_gif_file [ --fullrate | --forcerate=N | --scalerate=N | --bayerscale={1-5} | --minsize=N | --maxsize=N | --maxcolors={2-255} ] ... \n" "${exename##*/}"
	echo
	echo $(basename $0) "converts the input video to a GIF with size between 1.9 MB and 2.0 MB."
	echo "2.0 MB is the tumblr GIF size limit, which is why this limit is useful."
	echo "It normally halves the framerate but --fullrate tells" $(basename $0) "to use the full frame rate."
}

if [ "$1" = "-h" ] || [ "$1" = "-?" ] || [ "$2" = "" ] || [ "$1" = "-help" ] || [ "$1" = "--help" ] ; then
	usage
	exit 1
fi


datafile=$(mktemp)
palettefile=$(mktemp)
giffile=$(mktemp)
nutfile=$(mktemp)

inputfile="$1"; shift
outputfile="$1"; shift

doforcerate=false
dofullrate=false
doscalerate=false
forcedrate=""
scaledrate=""
bayerscale=3
maxcolors=144
maxsize=2097151
minsize=""

for i; do
	if [[ "$i" =~ ^--fullrate$ ]] ; then
		dofullrate=true
		doforcerate=false
		doscalerate=false
	elif [[ "$i" =~ ^--forcerate= ]] ; then
		doforcerate=true
		dofullrate=false
		doscalerate=false
		forcedrate="${i#--forcerate=}"
	elif [[ "$i" =~ ^--scalerate= ]] ; then
		doforcerate=false
		dofullrate=false
		doscalerate=true
		scaledrate="${i#--scalerate=}"
	elif [[ "$i" =~ ^--bayerscale= ]] ; then
		bayerscale="${i#--bayerscale=}"
	elif [[ "$i" =~ ^--maxcolors= ]] ; then
		maxcolors="${i#--maxcolors=}"
	elif [[ "$i" =~ ^--maxsize= ]] ; then
		maxsize="${i#--maxsize=}"
	elif [[ "$i" =~ ^--minsize= ]] ; then
		minsize="${i#--minsize=}"
	else
		>&2 echo "Unknown option: $i"
		exit 1
	fi
done

if [ -z "$minsize" ] ; then
	minsize=$(printf "%.0f" "$(printf '%s*0.9375\n' "$maxsize" | bc -l)")
fi

ffprobe -select_streams v -of flat -show_streams -show_format -hide_banner >$datafile 2>/dev/null "$inputfile"

extract() {
	value=$(grep streams.stream.0.$1= $datafile | sed "s/streams.stream.0.$1=//")
	if [ -z "$value" ] || [ "$value" = '"N/A"' ] ; then
		value=$(grep format.$1= $datafile | sed "s/format.$1=//")
	fi
	echo $value
}

filesize() {
	stat -c%s "$1"
}

width=$(extract width)
height=$(extract height)
duration=$(extract duration | tr -d '"')
rate=$(extract r_frame_rate | tr '"' ' ' | bc -l) || rate=$(extract avg_frame_rate | tr '"' ' ' | bc -l)
targetrate=$(awk -v rate="$rate" 'BEGIN { if (rate > 30) print 30; else print rate;}')
halfrate=$(echo "($targetrate)*0.5" | bc -l)
if $dofullrate; then
	framerate="-r $targetrate"
elif $doforcerate; then
	framerate="-r $forcedrate"
elif $doscalerate; then
	framerate="-vf setpts=N/$scaledrate/TB -r $scaledrate"
else
	framerate="-r $halfrate"
fi
scale=1
scalehigh=1
scalelow=1
foundlowerbound=0

fractionDone(){
	while read line; do
		if [ -n "$duration" ] && ! [ "$duration" = 'N/A' ] ; then
			timedone=$(echo $line | tr ' ' '\n' | grep time= | sed 's/time=//' | awk -F: '{ print ($1 * 3600) + ($2 * 60) + $3 }')
			printf "%s%%\n" $(echo "scale=4;$timedone/$duration*100" | bc)
		fi
	done
}

creategif(){
	newwidth=$(echo "scale=0;" $width \* $scale | bc)
	newheight=$(echo "scale=0;" $height \* $scale | bc)
	
	echo "Testing Size: " ${newwidth%.*}x${newheight%.*}
	ffmpeg -y -i "$inputfile" -map v -pix_fmt bgr0 -s ${newwidth%.*}x${newheight%.*} $framerate -c ffv1 -f nut $nutfile 2>&1 | stdbuf -o0 tr '\r' '\n' | grep --line-buffered "^frame" | fractionDone | while read line; do echo -n "Scaling Video... "; echo $line; done | stdbuf -o0 tr '\n' '\r'
	echo -n "Scaling Video... Done. Generating Palette... "
	ffmpeg -y -f nut -i $nutfile -vf "palettegen=max_colors=${maxcolors}" -c png -f image2 $palettefile >/dev/null 2>&1
	echo -ne 'Done. \r'
	ffmpeg -y -f nut -i $nutfile -f png_pipe -i $palettefile -lavfi "paletteuse=dither=bayer:bayer_scale=${bayerscale}" -c gif -f gif $giffile 2>&1 | stdbuf -o0 tr '\r' '\n' | grep --line-buffered "^frame" | fractionDone | while read line; do echo -n "Scaling Video... Done. Generating Palette... Done. Generating GIF... "; echo $line; done | stdbuf -o0 tr '\n' '\r'
	echo -n "Scaling Video... Done. Generating Palette... Done. Generating GIF... Done. Crushing GIF... "
	gifsicle --batch --unoptimize --optimize=3 "$giffile"
	echo 'Done.'
}

adjustscale(){
	echo -n "Checking Filesize... "
	currfilesize=$(filesize $giffile)
	if [ $currfilesize -gt $maxsize ] ; then
		if [ $foundlowerbound -eq 0 ] ; then
			echo -n "Too Big: "
			scalehigh=$scale
			scalelow=$(echo $scale / 2 | bc -l)
			scale=$scalelow
		else
			echo -n "Too Big: "
			scalehigh=$scale
			scale=$(echo 0.5 \* $scalelow + 0.5 \* $scalehigh | bc -l)
		fi
	elif [ $currfilesize -lt $minsize ] && [ $(echo "$scale < 1" | bc) -ne 0 ]; then
		echo -n "Too Small: "
		foundlowerbound=1
		scalelow=$scale
		scale=$(echo 0.5 \* $scalelow + 0.5 \* $scalehigh | bc -l)
	else
		echo -n "Just right: "
	fi
	echo $currfilesize
	echo
}

while [ $(echo "$scale < 1" | bc) -ne 0 ] && [ $(filesize $giffile) -lt $minsize ] || [ $(filesize $giffile) -gt $maxsize ] || [ $(filesize $giffile) -eq 0 ] ; do
	creategif
	adjustscale
done

mv $giffile "$outputfile"


