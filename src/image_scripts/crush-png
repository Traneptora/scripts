#!/usr/bin/env bash
set -e; set +H

if [ -z "$1" ] ; then
	>&2 echo "$0 filename.png"
	exit 1
fi

FINISHED_OPTIPNG=false
STILL_WORKING=true

ORIGPNG="$1"
QUIET=false
shift

for i; do
	if [ "$i" = "--quiet" ] ; then
		QUIET=true
	else
		LEVEL="$i"
	fi
done

if $QUIET; then
	STDOUT="/dev/null"
	STDERR="/dev/null"
else
	STDOUT="/dev/stderr"
	STDERR="/dev/stderr"
fi

if $QUIET; then
	OQUIET="-quiet"
else
	OQUIET=" "	
fi

TEMPPNG="$ORIGPNG".crushpng_tempout.$RANDOM.tpng
while [ -e "$TEMPPNG" ] ; do
	TEMPPNG="${TEMPPNG%.tpng}".$RANDOM.tpng
done

BAKPNG="$ORIGPNG".crushpng_backup.$RANDOM.tpng
while [ -e "$BAKPNG" ] ; do
	BAKPNG="${BAKPNG%.tpng}".$RANDOM.tpng
done

clup() {
	if $FINISHED_OPTIPNG ; then
		if $STILL_WORKING ; then
			>&2 echo "Received signal, cleaning up."
		fi
		rm -f "$TEMPPNG"
		cp -f --attributes-only --preserve=all "$BAKPNG" "$ORIGPNG"
		rm -f "$BAKPNG"
	else
		>&2 echo "Received signal, restoring from backup."
		cp --preserve=all "$BAKPNG" "$ORIGPNG"
		rm -f "$TEMPPNG"
		rm -f "$BAKPNG"
		rm -f "$ORIGPNG".bak
	fi
}

trap clup EXIT

cp --preserve=all "$ORIGPNG" "$BAKPNG"

optipng $OQUIET -fix -force -preserve -zc9 -zm8 -zs1 -f5 "$ORIGPNG"
FINISHED_OPTIPNG=true

zopflipng -y -m --filters=04me "$ORIGPNG" "$TEMPPNG" >$STDOUT
mv -f "$TEMPPNG" "$ORIGPNG"
STILL_WORKING=false
