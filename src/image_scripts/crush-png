#!/usr/bin/env bash
. tbz-common.sh

FINISHED_OPTIPNG=false
STILL_WORKING=true

QUIET=false
MULTI=false
INPUTS=()
ORIGPNG=""

for arg; do
	if [ "$arg" = "--quiet" ] ; then
		QUIET=true
	elif [ -z "$ORIGPNG" ] ; then
		ORIGPNG="$arg"
		INPUTS+=("$ORIGPNG")
	else
		MULTI=true
		INPUTS+=("$arg")
	fi
done

if [ -z "$ORIGPNG" ] ; then
	error "Usage: $(basename "$0") filename.png ..."
fi

if $MULTI; then
	for INPUT in "${INPUTS[@]}"; do
		if ! [ -e "$INPUT" ] ; then
			error "Can't find: $INPUT"
		fi
	done
	if $QUIET; then
		QUIETARG="--quiet"
	fi
	for INPUT in "${INPUTS[@]}"; do
		shecho "$0" $QUIETARG "$INPUT"
	done | parallel --lb
	exit 0
fi

if check "$QUIET"; then
	STDOUT="/dev/null"
	STDERR="/dev/null"
else
	STDOUT="/dev/stderr"
	STDERR="/dev/stderr"
fi

if check "$QUIET"; then
	OQUIET="-quiet"
else
	OQUIET=" "	
fi

TEMPPNG="$ORIGPNG".crushpng_tempout.$RANDOM.tpng
while [ -e "$TEMPPNG" ] ; do
	TEMPPNG="${TEMPPNG%.tpng}".$RANDOM.tpng
done

BAKPNG="$ORIGPNG".crushpng_backup.$RANDOM.tpng
while [ -e "$BAKPNG" ] ; do
	BAKPNG="${BAKPNG%.tpng}".$RANDOM.tpng
done

clup() {
	if check "$FINISHED_OPTIPNG" ; then
		if $STILL_WORKING ; then
			note "Received signal, cleaning up."
		fi
		rm -f "$TEMPPNG"
		cp -f --attributes-only --preserve=all "$BAKPNG" "$ORIGPNG"
		rm -f "$BAKPNG"
	else
		note "Received signal, restoring from backup."
		cp --preserve=all "$BAKPNG" "$ORIGPNG"
		rm -f "$TEMPPNG"
		rm -f "$BAKPNG"
		rm -f "$ORIGPNG".bak
	fi
}

trap clup EXIT

cp --preserve=all "$ORIGPNG" "$BAKPNG"

optipng $OQUIET -fix -force -preserve -zc9 -zm8 -zs1 -f5 "$ORIGPNG"
FINISHED_OPTIPNG=true

zopflipng -y -m --filters=04me "$ORIGPNG" "$TEMPPNG" >$STDOUT
mv -f "$TEMPPNG" "$ORIGPNG"
STILL_WORKING=false
